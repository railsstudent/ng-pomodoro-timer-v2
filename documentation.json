{
  "pipes": [
    {
      "name": "ConvertSecondsToStringPipe",
      "id": "pipe-ConvertSecondsToStringPipe-fcd385f8f69dfb48087da84cf7b42e2f348f01f36a263ef6dafca51d42335cf884e28b8d5c5c91dbf0431f84811cd1d3a24e90bbf37ce8db963bdfb9ae5c3b35",
      "file": "src/app/timer/timer-display/convert-seconds-to-string.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "getPrefix",
          "args": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "\"0\" | \"\"",
          "typeParameters": [],
          "line": 7,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "transform",
          "args": [
            {
              "name": "totalSeconds",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "totalSeconds",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "convertSecondsToString",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({\n  name: 'convertSecondsToString',\n})\nexport class ConvertSecondsToStringPipe implements PipeTransform {\n  private getPrefix(value: number) {\n    const ten = 10\n    return value < ten ? '0' : ''\n  }\n\n  transform(totalSeconds: number): string {\n    const secondsPerMinute = 60\n\n    const minutes = Math.floor(totalSeconds / secondsPerMinute)\n    const seconds = totalSeconds - minutes * secondsPerMinute\n\n    const strMinutes = `${this.getPrefix(minutes)}${minutes}`\n    const strSeconds = `${this.getPrefix(seconds)}${seconds}`\n\n    return `${strMinutes}:${strSeconds}`\n  }\n}\n"
    },
    {
      "name": "ConvertStatusToMessagePipe",
      "id": "pipe-ConvertStatusToMessagePipe-702d0c4d6bcef31162a865993b33f9b8222bcbb26646f3a222d3f2a2cbafe467b77c5d4c41deba4b21a7427de5032fe994ea88886eaa1e49b0dbe812717d4b63",
      "file": "src/app/timer/timer-message/convert-status-to-message.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "status",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "status",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "convertStatusToMessage",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\nimport { STATUS } from '../enums'\n\n@Pipe({\n  name: 'convertStatusToMessage',\n})\nexport class ConvertStatusToMessagePipe implements PipeTransform {\n  transform(status: string): string {\n    const messageMap = {\n      [STATUS.STOP]: 'Let the countdown begin!!',\n      [STATUS.RUNNING]: 'Greatness is within sight!!',\n      [STATUS.PAUSE]: 'Never quit keep going!!',\n    }\n\n    const typedStatusString = status as keyof typeof STATUS\n    const typedStatus = STATUS[typedStatusString]\n    return messageMap[typedStatus] || ''\n  }\n}\n"
    }
  ],
  "interfaces": [
    {
      "name": "ButtonActions",
      "id": "interface-ButtonActions-3db61767cf6ed03ea51a0dc8b786c4550ec7fb5ff41ab68dc55c9203f8b8f1506e2c53cc677ef64d894ad73212697e8fa824ff4b3353c7915e07aea264c4a2f6",
      "file": "src/app/timer/timer-buttons/timer-buttons.interface.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { STATUS } from '../enums'\n\nexport interface ButtonActions {\n  status?: STATUS\n  previousStatus?: STATUS\n}\n",
      "properties": [
        {
          "name": "previousStatus",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "STATUS",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "STATUS",
          "optional": true,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    }
  ],
  "injectables": [],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-d402d765962ae6eb135b0f33cfbd3388200bbd16542b40cbcae15d432f0ed564fbdc70e7e4439ea540e4dc032ce3513f711837ec35fa4f5cc3d9e9f7059026f2",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": [],
      "styles": [],
      "template": "<app-timer-shell></app-timer-shell>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "title",
          "defaultValue": "'ng-pomodoro-timer-v2.0'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-root',\n  template: '<app-timer-shell></app-timer-shell>',\n})\nexport class AppComponent {\n  title = 'ng-pomodoro-timer-v2.0'\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "TimerButtonsComponent",
      "id": "component-TimerButtonsComponent-b7ea354f280e9940e9b7ff0da66703156cbe0052b11a86bdcd65addf4ecccd49468fa8248e5594fc581b527e9cd2f9049f4b906ea347bf4f556cab7882b9b2f7",
      "file": "src/app/timer/timer-buttons/timer-buttons.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-timer-buttons",
      "styleUrls": ["./timer-buttons.component.scss"],
      "styles": [],
      "template": "<div class=\"flex p-4\">\n  <span class=\"spacer\"\n    ><ng-container *ngIf=\"debugMode\">{{ value }}</ng-container></span\n  >\n  <div class=\"spacer flex justify-evenly\">\n    <button class=\"start button\" aria-label=\"start timer\" #start>\n      <ng-container #playRef></ng-container>\n    </button>\n    <button class=\"pause button\" aria-label=\"pause timer\" #pause>\n      <ng-container #pausRef></ng-container>\n    </button>\n    <button class=\"stop button\" aria-label=\"stop timer\" #stop>\n      <ng-container #stopRef></ng-container>\n    </button>\n  </div>\n  <span class=\"spacer\"></span>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "countDownSeconds",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 80,
          "type": "number",
          "decorators": []
        },
        {
          "name": "debugMode",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "statusChange",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "EventEmitter"
        },
        {
          "name": "updateRemainingSeconds",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 89,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "btnPause",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 68,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'pause', {read: ElementRef, static: true}"
            }
          ]
        },
        {
          "name": "btnStart",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 62,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'start', {read: ElementRef, static: true}"
            }
          ]
        },
        {
          "name": "btnStop",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 65,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'stop', {read: ElementRef, static: true}"
            }
          ]
        },
        {
          "name": "faComponentRefs",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ComponentRef<>[]",
          "optional": false,
          "description": "",
          "line": 95
        },
        {
          "name": "pauseRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 74,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'pauseRef', {read: ViewContainerRef, static: true}"
            }
          ]
        },
        {
          "name": "playRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 71,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'playRef', {read: ViewContainerRef, static: true}"
            }
          ]
        },
        {
          "name": "stopRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 77,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'stopRef', {read: ViewContainerRef, static: true}"
            }
          ]
        },
        {
          "name": "subscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 91
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 93
        }
      ],
      "methodsClass": [
        {
          "name": "isButtonActionAllowed",
          "args": [
            {
              "type": "ButtonActions",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 171,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "type": "ButtonActions",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 183,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setupIcons",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 141,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [131]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ViewChild,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  Input,\n  ViewContainerRef,\n  ChangeDetectorRef,\n  ComponentRef,\n} from '@angular/core'\nimport {\n  EMPTY,\n  filter,\n  fromEvent,\n  map,\n  mapTo,\n  merge,\n  repeat,\n  scan,\n  startWith,\n  Subscription,\n  switchMap,\n  takeUntil,\n  takeWhile,\n  tap,\n  timer,\n} from 'rxjs'\nimport { STATUS } from '../enums'\nimport { BUTTON_STATE_MAP } from './timer-buttons.constant'\nimport { ButtonActions } from './timer-buttons.interface'\n\n@Component({\n  selector: 'app-timer-buttons',\n  template: `\n    <div class=\"flex p-4\">\n      <span class=\"spacer\"\n        ><ng-container *ngIf=\"debugMode\">{{ value }}</ng-container></span\n      >\n      <div class=\"spacer flex justify-evenly\">\n        <button class=\"start button\" aria-label=\"start timer\" #start>\n          <ng-container #playRef></ng-container>\n        </button>\n        <button class=\"pause button\" aria-label=\"pause timer\" #pause>\n          <ng-container #pausRef></ng-container>\n        </button>\n        <button class=\"stop button\" aria-label=\"stop timer\" #stop>\n          <ng-container #stopRef></ng-container>\n        </button>\n      </div>\n      <span class=\"spacer\"></span>\n    </div>\n  `,\n  styleUrls: ['./timer-buttons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimerButtonsComponent implements OnInit, OnDestroy {\n  @ViewChild('start', { read: ElementRef, static: true })\n  btnStart: ElementRef\n\n  @ViewChild('stop', { read: ElementRef, static: true })\n  btnStop: ElementRef\n\n  @ViewChild('pause', { read: ElementRef, static: true })\n  btnPause: ElementRef\n\n  @ViewChild('playRef', { read: ViewContainerRef, static: true })\n  playRef: ViewContainerRef\n\n  @ViewChild('pauseRef', { read: ViewContainerRef, static: true })\n  pauseRef: ViewContainerRef\n\n  @ViewChild('stopRef', { read: ViewContainerRef, static: true })\n  stopRef: ViewContainerRef\n\n  @Input()\n  countDownSeconds: number\n\n  @Input()\n  debugMode = false\n\n  @Output()\n  statusChange = new EventEmitter<string>()\n\n  @Output()\n  updateRemainingSeconds = new EventEmitter<number>()\n\n  subscription: Subscription\n\n  value: number\n\n  faComponentRefs: ComponentRef<unknown>[] = []\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.setupIcons()\n\n    this.value = this.countDownSeconds\n\n    const btnStartClicked$ = fromEvent(this.btnStart.nativeElement, 'click').pipe(mapTo(STATUS.RUNNING))\n    const btnStopClicked$ = fromEvent(this.btnStop.nativeElement, 'click').pipe(\n      mapTo(STATUS.STOP),\n      tap(() => this.statusChange.emit(STATUS.STOP)),\n    )\n    const btnPauseClicked$ = fromEvent(this.btnPause.nativeElement, 'click').pipe(mapTo(STATUS.PAUSE))\n\n    this.subscription = merge(btnStartClicked$, btnPauseClicked$)\n      .pipe(\n        scan(\n          (acc: ButtonActions, status) => ({\n            status,\n            previousStatus: acc.status,\n          }),\n          { status: undefined, previousStatus: undefined },\n        ),\n        filter((buttonActions) => this.isButtonActionAllowed(buttonActions)),\n        map((buttonActions) => buttonActions.status || STATUS.PAUSE),\n        tap((status) => {\n          this.statusChange.emit(status)\n        }),\n        switchMap((status) => (status === STATUS.RUNNING ? timer(0, 1000) : EMPTY)),\n        mapTo(-1),\n        scan((acc, value) => acc + value, this.countDownSeconds),\n        takeWhile((value) => value >= 0),\n        takeUntil(btnStopClicked$),\n        startWith(this.countDownSeconds),\n        repeat(),\n      )\n      .subscribe((value) => {\n        if (typeof value === 'number') {\n          this.value = value\n          this.updateRemainingSeconds.emit(value)\n        }\n      })\n  }\n\n  async setupIcons() {\n    const faPlay = (await import('@fortawesome/free-solid-svg-icons')).faPlay\n    const faPause = (await import('@fortawesome/free-solid-svg-icons')).faPause\n    const faStop = (await import('@fortawesome/free-solid-svg-icons')).faStop\n\n    const FaIconComponent = (await import('@fortawesome/angular-fontawesome')).FaIconComponent\n\n    this.playRef.clear()\n    this.pauseRef.clear()\n    this.stopRef.clear()\n\n    const playComponentRef = this.playRef.createComponent(FaIconComponent)\n    playComponentRef.instance.icon = faPlay\n    playComponentRef.instance.render()\n\n    const pauseComponentRef = this.pauseRef.createComponent(FaIconComponent)\n    pauseComponentRef.instance.icon = faPause\n    pauseComponentRef.instance.render()\n\n    const stopComponentRef = this.stopRef.createComponent(FaIconComponent)\n    stopComponentRef.instance.icon = faStop\n    stopComponentRef.instance.render()\n\n    this.faComponentRefs.push(playComponentRef)\n    this.faComponentRefs.push(pauseComponentRef)\n    this.faComponentRefs.push(stopComponentRef)\n\n    this.cdr.detectChanges()\n  }\n\n  isButtonActionAllowed({ status, previousStatus }: ButtonActions): boolean {\n    if (!status) {\n      return false\n    }\n\n    if (previousStatus) {\n      const allowedStatus = BUTTON_STATE_MAP[previousStatus]\n      return allowedStatus.includes(status)\n    }\n    return status == STATUS.RUNNING\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe()\n    }\n\n    for (const ref of this.faComponentRefs) {\n      ref.destroy()\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\n  display: block;\n}\n\n.spacer {\n  @apply basis-1/3 grow shrink;\n}\n\n.button {\n  @apply bg-black;\n  @apply p-4;\n  @apply text-white;\n  @apply rounded-lg;\n  width: 45px;\n  height: 45px;\n  @apply flex justify-center items-center;\n}\n",
          "styleUrl": "./timer-buttons.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 95,
        "jsdoctags": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"]
    },
    {
      "name": "TimerDisplayComponent",
      "id": "component-TimerDisplayComponent-d53876ad8f2437054261059c2b8c7b1d4bbd56576f42e3725ae4f0fae281356dc475c667bd17bd969ece4604c9e0f378f7a59ded7c1bec4611aa2be49bcfe513",
      "file": "src/app/timer/timer-display/timer-display.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-timer-display",
      "styleUrls": [],
      "styles": ["\n      :host {\n        display: block;\n      }\n    "],
      "template": "<div class=\"p-4\">\n  <p class=\"text-[10rem] leading-[4rem] text-pink-800 text-center\">\n    {{ totalSeconds | convertSecondsToString }}\n  </p>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "totalSeconds",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'app-timer-display',\n  template: `\n    <div class=\"p-4\">\n      <p class=\"text-[10rem] leading-[4rem] text-pink-800 text-center\">\n        {{ totalSeconds | convertSecondsToString }}\n      </p>\n    </div>\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimerDisplayComponent {\n  @Input()\n  totalSeconds: number\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n      :host {\n        display: block;\n      }\n    \n"
    },
    {
      "name": "TimerMessageComponent",
      "id": "component-TimerMessageComponent-a666b340d51a17f9ac4a73ba653d37184ab242650f04ea41ae706d09dfe58dee6ba7ce46be899a54cb68def2f73feb7dca6f27a7144e711652ef4a25a9e779ae",
      "file": "src/app/timer/timer-message/timer-message.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-timer-message",
      "styleUrls": [],
      "styles": ["\n      :host {\n        display: block;\n      }\n    "],
      "template": "<div class=\"my-4 p-3\">\n  <p class=\"text-7xl text-pink-800 text-center\">{{ status | convertStatusToMessage }}</p>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'app-timer-message',\n  template: `\n    <div class=\"my-4 p-3\">\n      <p class=\"text-7xl text-pink-800 text-center\">{{ status | convertStatusToMessage }}</p>\n    </div>\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimerMessageComponent {\n  @Input()\n  status: string\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n      :host {\n        display: block;\n      }\n    \n"
    },
    {
      "name": "TimerShellComponent",
      "id": "component-TimerShellComponent-dcd4587c6425f40242ae366419c9b1afa6bba77278f7fd84fac6a03b2c7de325cd80dee45a56b49eb543ce6f6f14e77df500ab038df5e15b3fb1cabba1769fa0",
      "file": "src/app/timer/timer-shell/timer-shell.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-timer-shell",
      "styleUrls": [],
      "styles": [
        "\n      :host {\n        display: block;\n        height: 100vh;\n      }\n    "
      ],
      "template": "<div class=\"h-full bg-sky-400 flex flex-col justify-center\">\n  <div>\n    <app-timer-message class=\"mb-6\" [status]=\"status\"></app-timer-message>\n    <app-timer-display class=\"mb-8\" [totalSeconds]=\"totalSeconds\"></app-timer-display>\n    <app-timer-buttons\n      [countDownSeconds]=\"totalSeconds\"\n      (statusChange)=\"statusChange($event)\"\n      (updateRemainingSeconds)=\"updateRemainingSeconds($event)\"\n    ></app-timer-buttons>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "totalSeconds",
          "defaultValue": "900",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "status",
          "defaultValue": "'STOP'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 32
        }
      ],
      "methodsClass": [
        {
          "name": "statusChange",
          "args": [
            {
              "name": "otherStatus",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "otherStatus",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateRemainingSeconds",
          "args": [
            {
              "name": "secondsRemained",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "secondsRemained",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'app-timer-shell',\n  template: `\n    <div class=\"h-full bg-sky-400 flex flex-col justify-center\">\n      <div>\n        <app-timer-message class=\"mb-6\" [status]=\"status\"></app-timer-message>\n        <app-timer-display class=\"mb-8\" [totalSeconds]=\"totalSeconds\"></app-timer-display>\n        <app-timer-buttons\n          [countDownSeconds]=\"totalSeconds\"\n          (statusChange)=\"statusChange($event)\"\n          (updateRemainingSeconds)=\"updateRemainingSeconds($event)\"\n        ></app-timer-buttons>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n        height: 100vh;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimerShellComponent {\n  @Input()\n  totalSeconds = 900\n\n  status = 'STOP'\n\n  statusChange(otherStatus: string) {\n    this.status = otherStatus\n  }\n\n  updateRemainingSeconds(secondsRemained: number) {\n    this.totalSeconds = secondsRemained\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n      :host {\n        display: block;\n        height: 100vh;\n      }\n    \n"
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "id": "module-AppModule-7f4ed85f3ea0875013294504d170253086fceb4785d232fc8702336968c911b88c6ed4a18df66adcfdc749b86c5c8ea1718ad39e40fdddf3e86dfede3ace89d2",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core'\nimport { BrowserModule } from '@angular/platform-browser'\n\nimport { AppComponent } from './app.component'\nimport { TimerModule } from './timer'\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, TimerModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "TimerModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TimerButtonsModule",
      "id": "module-TimerButtonsModule-04a96dde0bb30dd43e84b587245399921a086ae6f008a1e945bb67b9a6c4d8bc777f2cb44a724c0a6e62ad81a2489dbf9bc00d053897fe1b0c8259ed358d1bcd",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/timer/timer-buttons/timer-buttons.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { TimerButtonsComponent } from './timer-buttons.component'\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\n\n@NgModule({\n  declarations: [TimerButtonsComponent],\n  imports: [CommonModule, FontAwesomeModule],\n  exports: [TimerButtonsComponent],\n})\nexport class TimerButtonsModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "TimerButtonsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TimerButtonsComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TimerDisplayModule",
      "id": "module-TimerDisplayModule-1c929e346011f93c5c6910ef6fd4fa64885b13cd38f48f3bf89fe4d4f26aa042f883c766387169d044767c9a417bb823b7681f256cadb62a7be33a8f888571af",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/timer/timer-display/timer-display.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { ConvertSecondsToStringPipe } from './convert-seconds-to-string.pipe'\nimport { TimerDisplayComponent } from './timer-display.component'\n\n@NgModule({\n  declarations: [TimerDisplayComponent, ConvertSecondsToStringPipe],\n  imports: [CommonModule],\n  exports: [TimerDisplayComponent],\n})\nexport class TimerDisplayModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ConvertSecondsToStringPipe"
            },
            {
              "name": "TimerDisplayComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TimerDisplayComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TimerMessageModule",
      "id": "module-TimerMessageModule-ae56699fc85d40854da4ebd0eb27d4c01e2af5aeebb1f3712ed569348e9155210749ac8ec1a1ebc2274e9d7a2d3ee7e14954d1e67ad76400669117160c3389b5",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/timer/timer-message/timer-message.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { TimerMessageComponent } from './timer-message.component'\nimport { ConvertStatusToMessagePipe } from './convert-status-to-message.pipe'\n\n@NgModule({\n  declarations: [TimerMessageComponent, ConvertStatusToMessagePipe],\n  imports: [CommonModule],\n  exports: [TimerMessageComponent],\n})\nexport class TimerMessageModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ConvertStatusToMessagePipe"
            },
            {
              "name": "TimerMessageComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TimerMessageComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TimerModule",
      "id": "module-TimerModule-9f076fbe4278d641ea6e0dbe699cf64e3dee03585662af0b7488ea89e461355b15a8a99ed18558e863f7524d181be7bb03e2f7f381cb9473a905e921f5ecab85",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/timer/timer.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { TimerShellModule } from './timer-shell'\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, TimerShellModule],\n  exports: [TimerShellModule],\n})\nexport class TimerModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "TimerShellModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TimerShellModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TimerShellModule",
      "id": "module-TimerShellModule-123803dc62407f4d5235dd4844ee483debcd4b578723de9119a804726eb397ef739288b27a4b8cb198ad26ab41605bdc83db4466ee7084424fa0e39d6b08f350",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/timer/timer-shell/timer-shell.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { TimerShellComponent } from './timer-shell.component'\nimport { TimerDisplayModule } from '../timer-display'\nimport { TimerMessageModule } from '../timer-message'\nimport { TimerButtonsModule } from '../timer-buttons'\n\n@NgModule({\n  declarations: [TimerShellComponent],\n  imports: [CommonModule, TimerDisplayModule, TimerMessageModule, TimerButtonsModule],\n  exports: [TimerShellComponent],\n})\nexport class TimerShellModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "TimerShellComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "TimerButtonsModule"
            },
            {
              "name": "TimerDisplayModule"
            },
            {
              "name": "TimerMessageModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TimerShellComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "ActionsData",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-buttons/time-butons.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  statusChange: action('statusChange'),\n  updateRemainingSeconds: action('updateRemainingSeconds'),\n}"
      },
      {
        "name": "BUTTON_STATE_MAP",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-buttons/timer-buttons.constant.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  [STATUS.RUNNING]: [STATUS.STOP, STATUS.PAUSE],\n  [STATUS.PAUSE]: [STATUS.RUNNING, STATUS.STOP],\n  [STATUS.STOP]: [STATUS.RUNNING],\n}"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: true,\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: false,\n}"
      },
      {
        "name": "FiveMinutesTimer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-shell/timer-shell.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LessThanTenMinutes",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-display/timer-display.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LessThanTenSeconds",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-display/timer-display.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Pause",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-message/timer-message.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-display/timer-display.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-shell/timer-shell.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "QuickPrimary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-buttons/time-butons.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "literal type"
      },
      {
        "name": "Running",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-message/timer-message.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Stop",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-message/timer-message.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<AppComponent>",
        "defaultValue": "(args: AppComponent) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-buttons/time-butons.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<TimerButtonsComponent>",
        "defaultValue": "(args: TimerButtonsComponent) => ({\n  props: {\n    ...args,\n    statusChange: ActionsData.statusChange,\n    updateRemainingSeconds: ActionsData.updateRemainingSeconds,\n  },\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-display/timer-display.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<TimerDisplayComponent>",
        "defaultValue": "(args: TimerDisplayComponent) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-message/timer-message.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<TimerMessageComponent>",
        "defaultValue": "(args: TimerMessageComponent) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-shell/timer-shell.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<TimerShellComponent>",
        "defaultValue": "(args: TimerShellComponent) => ({\n  props: args,\n})"
      },
      {
        "name": "TwoMinutesTimer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-buttons/time-butons.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Zero",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/timer/timer-display/timer-display.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      }
    ],
    "functions": [],
    "typealiases": [],
    "enumerations": [
      {
        "name": "STATUS",
        "childs": [
          {
            "name": "STOP",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "STOP"
          },
          {
            "name": "PAUSE",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "PAUSE"
          },
          {
            "name": "RUNNING",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "RUNNING"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/timer/enums/status.enum.ts"
      }
    ],
    "groupedVariables": {
      "src/app/timer/timer-buttons/time-butons.stories.ts": [
        {
          "name": "ActionsData",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-buttons/time-butons.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  statusChange: action('statusChange'),\n  updateRemainingSeconds: action('updateRemainingSeconds'),\n}"
        },
        {
          "name": "QuickPrimary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-buttons/time-butons.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-buttons/time-butons.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<TimerButtonsComponent>",
          "defaultValue": "(args: TimerButtonsComponent) => ({\n  props: {\n    ...args,\n    statusChange: ActionsData.statusChange,\n    updateRemainingSeconds: ActionsData.updateRemainingSeconds,\n  },\n})"
        },
        {
          "name": "TwoMinutesTimer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-buttons/time-butons.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        }
      ],
      "src/app/timer/timer-buttons/timer-buttons.constant.ts": [
        {
          "name": "BUTTON_STATE_MAP",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-buttons/timer-buttons.constant.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  [STATUS.RUNNING]: [STATUS.STOP, STATUS.PAUSE],\n  [STATUS.PAUSE]: [STATUS.RUNNING, STATUS.STOP],\n  [STATUS.STOP]: [STATUS.RUNNING],\n}"
        }
      ],
      "src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: true,\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: false,\n}"
        }
      ],
      "src/app/timer/timer-shell/timer-shell.stories.ts": [
        {
          "name": "FiveMinutesTimer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-shell/timer-shell.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-shell/timer-shell.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-shell/timer-shell.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<TimerShellComponent>",
          "defaultValue": "(args: TimerShellComponent) => ({\n  props: args,\n})"
        }
      ],
      "src/app/timer/timer-display/timer-display.stories.ts": [
        {
          "name": "LessThanTenMinutes",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-display/timer-display.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LessThanTenSeconds",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-display/timer-display.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-display/timer-display.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-display/timer-display.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<TimerDisplayComponent>",
          "defaultValue": "(args: TimerDisplayComponent) => ({\n  props: args,\n})"
        },
        {
          "name": "Zero",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-display/timer-display.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        }
      ],
      "src/app/timer/timer-message/timer-message.stories.ts": [
        {
          "name": "Pause",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-message/timer-message.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Running",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-message/timer-message.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Stop",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-message/timer-message.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/timer/timer-message/timer-message.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<TimerMessageComponent>",
          "defaultValue": "(args: TimerMessageComponent) => ({\n  props: args,\n})"
        }
      ],
      "src/app/app.stories.ts": [
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<AppComponent>",
          "defaultValue": "(args: AppComponent) => ({\n  props: args,\n})"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {
      "src/app/timer/enums/status.enum.ts": [
        {
          "name": "STATUS",
          "childs": [
            {
              "name": "STOP",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "STOP"
            },
            {
              "name": "PAUSE",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "PAUSE"
            },
            {
              "name": "RUNNING",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "RUNNING"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/timer/enums/status.enum.ts"
        }
      ]
    },
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 0,
    "status": "low",
    "files": [
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/app.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-buttons/time-butons.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ActionsData",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-buttons/time-butons.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "QuickPrimary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-buttons/time-butons.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-buttons/time-butons.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TwoMinutesTimer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-buttons/timer-buttons.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TimerButtonsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-buttons/timer-buttons.constant.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "BUTTON_STATE_MAP",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-buttons/timer-buttons.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ButtonActions",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-display/convert-seconds-to-string.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "ConvertSecondsToStringPipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-display/timer-display.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TimerDisplayComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-display/timer-display.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LessThanTenMinutes",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-display/timer-display.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LessThanTenSeconds",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-display/timer-display.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-display/timer-display.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-display/timer-display.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Zero",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-message/convert-status-to-message.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "ConvertStatusToMessagePipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-message/timer-message.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TimerMessageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-message/timer-message.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Pause",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-message/timer-message.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Running",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-message/timer-message.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Stop",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-message/timer-message.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-shell/timer-shell.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TimerShellComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-shell/timer-shell.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FiveMinutesTimer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-shell/timer-shell.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/timer/timer-shell/timer-shell.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
